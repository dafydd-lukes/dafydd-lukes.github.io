<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Little Umbrellas - floss</title><link href="http://dlukes.github.io/" rel="alternate"></link><link href="http://dlukes.github.io/feeds/floss.atom.xml" rel="self"></link><id>http://dlukes.github.io/</id><updated>2017-10-24T00:00:00+02:00</updated><entry><title>Monkey-patching in R</title><link href="http://dlukes.github.io/monkey-patching-in-r.html" rel="alternate"></link><published>2017-10-24T00:00:00+02:00</published><updated>2017-10-24T00:00:00+02:00</updated><author><name>dlukes</name></author><id>tag:dlukes.github.io,2017-10-24:/monkey-patching-in-r.html</id><summary type="html">&lt;p&gt;How to monkey-patch functions in imported libraries in R.&lt;/p&gt;</summary><content type="html">&lt;p&gt;While building a &lt;a href="https://shiny.rstudio.com/"&gt;Shiny&lt;/a&gt; application with R recently, I've come across the need
to invert the &lt;code&gt;filterRange()&lt;/code&gt; function in the &lt;a href="https://rstudio.github.io/DT/"&gt;DT&lt;/a&gt; package, which provides a
convenient high-level way to add &lt;a href="https://datatables.net/"&gt;DataTables&lt;/a&gt; to your Shiny app. As indicated
by its name, this function filters a numeric column in your datatable based on
a range, so as it contains only values contained &lt;strong&gt;within that range&lt;/strong&gt;. What I
needed was the opposite: include values &lt;strong&gt;outside the specified range&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The filtering is done server-side and unfortunately, no option is provided
out-of-the-box to perform this inversion. One of the solutions is therefore to
monkey-patch the &lt;code&gt;filterRange()&lt;/code&gt; function in the &lt;code&gt;DT&lt;/code&gt; R package, replacing it
with a version that filters the outer range instead.&lt;/p&gt;
&lt;p&gt;Googling for "monkey patching r" (currently) yields this &lt;a href="https://www.r-bloggers.com/an-example-of-monkey-patching-a-package/"&gt;blog post&lt;/a&gt;,
which provides a more complicated though arguably cleaner solution, which
introduces a new environment in the search path. My position on this is that if
you're worried about cleanliness, you shouldn't be monkey-patching in the first
place. Conversely, if you decide monkey-patching is acceptable in your
situation, the code required should be as quick and dirty as the thought.&lt;/p&gt;
&lt;p&gt;Of course, this is R, uncontested king of weird ways of doing anything but the
most common data analysis tasks, and even some of those -- so it's never going
to be as simple as Python, for instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# Aaand done.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But it doesn't have to be as complicated as the solution in the blog post
above, either.&lt;/p&gt;
&lt;p&gt;The solution presented here is basically taken from &lt;a href="https://stat.ethz.ch/pipermail/r-help/2008-August/171217.html"&gt;this mailing list
post&lt;/a&gt;, which has the disadvantage of not containing the key term
"monkey-patch", which makes it hard to find on Google. It consists in the
following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get a handle on the relevant library's namespace with &lt;code&gt;getNamespace()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Make the relevant binding modifiable with &lt;code&gt;unlockBinding()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Define your custom version of the function.&lt;/li&gt;
&lt;li&gt;Store it in the namespace under the original name.&lt;/li&gt;
&lt;li&gt;Re-seal everything with &lt;code&gt;lockBinding()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here's the code for my specific use case with &lt;code&gt;DT::filterRange()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Monkey patch the filterRange() function in the DT package so that server-side filtering returns&lt;/span&gt;
&lt;span class="c1"&gt;# values *outside* the range instead of inside.&lt;/span&gt;

DT &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;getNamespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kp"&gt;unlockBinding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;filterRange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; DT&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;####################################################################################################&lt;/span&gt;
&lt;span class="c1"&gt;# This part of the code is deliberately kept as similar to the original as possible, in order to&lt;/span&gt;
&lt;span class="c1"&gt;# make potential updates easier. See https://github.com/rstudio/DT/blob/v0.2/R/shiny.R#L474.&lt;/span&gt;

&lt;span class="c1"&gt;# filter a numeric/date/time vector using the search string &amp;quot;lower ... upper&amp;quot;&lt;/span&gt;
filterRange &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;d&lt;span class="p"&gt;,&lt;/span&gt; string&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kp"&gt;grepl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;[.]{3}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; string&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kp"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;r &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;strsplit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;string&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;[.]{3}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kp"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;The range of a numeric / date / time column must be of length 2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;r&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; r &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;r&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# lower,&lt;/span&gt;
  r &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;^\\s+|\\s+$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; r&lt;span class="p"&gt;)&lt;/span&gt;
  r1 &lt;span class="o"&gt;=&lt;/span&gt; r&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; r2 &lt;span class="o"&gt;=&lt;/span&gt; r&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;is.numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;d&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    r1 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;as.numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;r1&lt;span class="p"&gt;);&lt;/span&gt; r2 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;as.numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;r2&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;inherits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;d&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;r1 &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; r1 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;as.Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;r1&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;r2 &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; r2 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;as.Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;r2&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;r1 &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; r1 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;as.POSIXct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;r1&lt;span class="p"&gt;,&lt;/span&gt; tz &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;GMT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;%Y-%m-%dT%H:%M:%S&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;r2 &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; r2 &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;as.POSIXct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;r2&lt;span class="p"&gt;,&lt;/span&gt; tz &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;GMT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;%Y-%m-%dT%H:%M:%S&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;r&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;d &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; r2&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;r&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;d &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; r1&lt;span class="p"&gt;)&lt;/span&gt;
  d &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; r1 &lt;span class="o"&gt;|&lt;/span&gt; d &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; r2
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# End pastiche of original DT code.&lt;/span&gt;
&lt;span class="c1"&gt;####################################################################################################&lt;/span&gt;

DT&lt;span class="o"&gt;$&lt;/span&gt;filterRange &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; filterRange
&lt;span class="kp"&gt;lockBinding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;filterRange&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; DT&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last piece of the puzzle concerns UX: the user should understand that the
filter applies to the outer range, not the inner one. Visually:&lt;/p&gt;
&lt;p&gt;&lt;img alt="switch inner to outer range" src="images/inner-to-outer-range.png"&gt;&lt;/p&gt;
&lt;p&gt;This is easily achieved with a few lines of CSS:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;datatable-id&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;noUi-background&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#3FB8AF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;inset&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="nb"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;.45&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;background&lt;/span&gt; &lt;span class="mi"&gt;450&lt;/span&gt;&lt;span class="kt"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;datatable-id&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;noUi-connect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#FAFAFA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;inset&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="mh"&gt;#f0f0f0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In conclusion, monkey-patching is rarely the most elegant, debuggable and
maintainable solution to a problem you're having. More often, it's actually
&lt;em&gt;the least&lt;/em&gt; elegant (etc.) one. But every once in a while, it's the simplest
one, the one with the best hassle/reward ratio (until it comes back to bite you
once your codebase has grown or assumptions about the monkey-patched code have
changed). At any rate, if you need to resort to it, it's nice to have a quick,
googlable how-to, hence this post.&lt;/p&gt;</content><category term="floss"></category><category term="hack"></category><category term="r"></category><category term="monkey-patching"></category></entry><entry><title>"Responsive" iframes, e.g. for DokuWiki and Shiny</title><link href="http://dlukes.github.io/responsive-iframe.html" rel="alternate"></link><published>2016-09-29T00:00:00+02:00</published><updated>2016-09-29T00:00:00+02:00</updated><author><name>dlukes</name></author><id>tag:dlukes.github.io,2016-09-29:/responsive-iframe.html</id><summary type="html">&lt;p&gt;How to embed a "responsive" (i.e. vertically resizing) iframe in a web page.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometimes, the best way to embed an interactive element into a website is to use
an iframe. Obviously, not when your website is a webapp and that element
represents the main functionality it's supposed to provide -- that would be
gross. But when your website is mostly textual / graphical content, typically
authored within a wiki or blogging platform, and you just want to include this
one element to liven it up, iframes are actually a decent (and perhaps the
only?) solution.&lt;/p&gt;
&lt;p&gt;Trouble is, you probably want this Frankenstein monster to actually look good,
i.e. seamless if at all possible. But iframes don't have automatic vertical
resizing according to their content, which means you'll need to take care of
that manually. How? By using the JavaScript messaging API for communication
between parent and child frames to send information about window resize events
(from parent to child) and height updates (from child to parent).&lt;/p&gt;
&lt;p&gt;Let's imagine you have a &lt;a href="https://www.dokuwiki.org/dokuwiki#"&gt;DokuWiki&lt;/a&gt; article
in which you want to embed a small &lt;a href="http://shiny.rstudio.com/"&gt;Shiny&lt;/a&gt; app. If
you just embed it in your dokuwiki code using an iframe, taking care to remove
the border and stretch it horizontally...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;iframe&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;embedded-app&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://your.shiny.app/url&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;frameborder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100%&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;iframe&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;... this will happen:&lt;/p&gt;
&lt;p&gt;&lt;img alt="non-responsive iframe" src="images/non_responsive.png"&gt;&lt;/p&gt;
&lt;p&gt;Eww, scrollbar. Messaging to the rescue! First of all, you need to teach your
embedded web page to send information about its height to the parent at
appropriate times. This can be achieved by adding this piece of JavaScript to
it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;////////////////////////////////////////////&lt;/span&gt;
  &lt;span class="c1"&gt;// CONFIGURE THESE TO MATCH YOUR USE CASE //&lt;/span&gt;
  &lt;span class="c1"&gt;////////////////////////////////////////////&lt;/span&gt;

  &lt;span class="c1"&gt;// set this to a selector for the element that contains the entire UI&lt;/span&gt;
  &lt;span class="c1"&gt;// you want to access via the iframe -- for a Shiny app, it might be&lt;/span&gt;
  &lt;span class="c1"&gt;// a div with Bootstrap&amp;#39;s container-fluid class&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;containerSelector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.container-fluid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// this should be the root URL of the parent frame (DokuWiki) which you want&lt;/span&gt;
  &lt;span class="c1"&gt;// to allow to send messages to the child&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;allowedOrigin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://dokuwiki.example.com&amp;quot;&lt;/span&gt;

  &lt;span class="c1"&gt;///////////////////////&lt;/span&gt;
  &lt;span class="c1"&gt;// END CONFIGURATION //&lt;/span&gt;
  &lt;span class="c1"&gt;///////////////////////&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sendHeightOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollHeight&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;No element corresponding to querySelector &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;querySelector&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                  &lt;span class="s2"&gt;&amp;quot; found, or element did not have property scrollHeight.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// cross-browser compatible infrastructure&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;eventMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;addEventListener&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;attachEvent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;eventer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eventMethod&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;messageEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;eventMethod&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;attachEvent&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;onmessage&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// listen for resize message from parent window (see point ② below)&lt;/span&gt;
  &lt;span class="nx"&gt;eventer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;messageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;allowedOrigin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;sendHeightOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;containerSelector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Was expecting a message from &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;allowedOrigin&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;, got &amp;quot;&lt;/span&gt;
                  &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; instead.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// inform parent at least once after load (see point ① below)&lt;/span&gt;
    &lt;span class="nx"&gt;sendHeightOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;containerSelector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// monitor self-initiated changes in size (see point ③ below)&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MutationObserver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;sendHeightOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;containerSelector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;mo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;subtree&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;childList&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;characterData&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What are these "appropriate times" mentioned above? The code above implements
the following ones, which should be generic enough to cover most situations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;on initial page load&lt;/li&gt;
&lt;li&gt;on window resize (see below, the parent frame has to send a message to the
   child frame that it has been resized, to which the child responds with a size
   update message)&lt;/li&gt;
&lt;li&gt;on any kind of mutation of the DOM inside the child frame (not a full reload
   of the entire page, that would be handled by point ① above), which might
   affect the size of the rendered component&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;On the parent (DokuWiki) side, you then need to handle the incoming size update
messages from the child frame, and send resize messages when the window is
resized. This can be achieved with the following DokuWiki markup:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;iframe&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;embedded-app&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://your.shiny.app/url&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;frameborder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100%&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;iframe&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;////////////////////////////////////////////&lt;/span&gt;
  &lt;span class="c1"&gt;// CONFIGURE THESE TO MATCH YOUR USE CASE //&lt;/span&gt;
  &lt;span class="c1"&gt;////////////////////////////////////////////&lt;/span&gt;

  &lt;span class="c1"&gt;// this should be the root URL of the child frame (Shiny app) which you want&lt;/span&gt;
  &lt;span class="c1"&gt;// to allow to send messages to the parent&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;allowedOrigin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://your.shiny.app&amp;quot;&lt;/span&gt;

  &lt;span class="c1"&gt;///////////////////////&lt;/span&gt;
  &lt;span class="c1"&gt;// END CONFIGURATION //&lt;/span&gt;
  &lt;span class="c1"&gt;///////////////////////&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;embeddedApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;embedded-app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;resizeIframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pixels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;embeddedApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pixels&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;px&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// cross-browser compatible infrastructure&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;eventMethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;addEventListener&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;attachEvent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;eventer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;eventMethod&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;messageEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;eventMethod&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;attachEvent&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;onmessage&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// listen to message from iframe&lt;/span&gt;
  &lt;span class="nx"&gt;eventer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;messageEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;allowedOrigin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="nx"&gt;resizeIframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Was expecting a message from &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;allowedOrigin&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;, got &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; instead.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// send message to iframe on window resize&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onresize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;embeddedApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contentWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;parentWindowResized&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the result?&lt;/p&gt;
&lt;p&gt;&lt;img alt="responsive iframe" src="images/responsive.png"&gt;&lt;/p&gt;
&lt;p&gt;Yay! And of course, the iframe gets resized as needed when display conditions
change:&lt;/p&gt;
&lt;p&gt;&lt;img alt="responsive iframe rearranged" src="images/responsive_rearranged.png"&gt;&lt;/p&gt;
&lt;p&gt;Cue bittersweet feeling after having figured out a workaround for such a
specific use case that you're &lt;a href="http://www.xkcd.com/1691/"&gt;not quite sure&lt;/a&gt; it was
worth putting all that effort into it in the first place...&lt;/p&gt;</content><category term="floss"></category><category term="javascript"></category><category term="html"></category><category term="iframe"></category><category term="dokuwiki"></category><category term="shiny"></category></entry><entry><title>Beyond semantic versioning? (cross-post)</title><link href="http://dlukes.github.io/beyond-semver.html" rel="alternate"></link><published>2014-12-14T00:00:00+01:00</published><updated>2014-12-14T00:00:00+01:00</updated><author><name>dlukes</name></author><id>tag:dlukes.github.io,2014-12-14:/beyond-semver.html</id><summary type="html">&lt;p&gt;Semantic versioning is a good idea, but it would be better to use an explicit keyword system to signal (non-)breaking changes in library versions.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;Ever since I first read about &lt;a href="http://semver.org/"&gt;semantic versioning&lt;/a&gt;, I've
thought of it as a neat idea. But only recently did it occur to me that what
I liked about the idea was its goal, much less its execution (more on that
below). What made it obvious was &lt;a href="https://github.com/jashkenas/underscore/issues/1805"&gt;this lengthy
discussion&lt;/a&gt; about breaking
changes introduced in v1.7 of &lt;a href="http://underscorejs.org/"&gt;underscore.js&lt;/a&gt; without
an accompanying major version bump.&lt;/p&gt;
&lt;p&gt;Even though I still think sticking to semver is the right thing to do if your
community of users expects you to (even if you don't personally like the
system), I am convinced there are fundamentally better ways of dealing with the
problem of safely and consistently updating dependencies.&lt;/p&gt;
&lt;p&gt;It made me want to add &lt;a href="https://github.com/jashkenas/underscore/issues/1805#issuecomment-66929684"&gt;my two cents to the
discussion&lt;/a&gt;,
as someone who's more of a dabbler in programming and not really part of the
community, so feel free to ignore me :) I attach my commentary below for
reference (it's virtually the same text as in the link above).&lt;/p&gt;
&lt;h1&gt;tl;dr&lt;/h1&gt;
&lt;p&gt;semver is trying to do the right thing, but doing it wrong -- instead of
&lt;strong&gt;implicitly&lt;/strong&gt; encoding severity of change information in &lt;strong&gt;version numbers&lt;/strong&gt;,
&lt;strong&gt;explicit keywords&lt;/strong&gt; like :patch, :potentially-breaking or :major-api-change
would make much more sense.&lt;/p&gt;
&lt;h1&gt;More verbosely&lt;/h1&gt;
&lt;p&gt;I've always found the goals of semver worthy, but this thread has made me
realize that while its aims are commendable, its methods are kind of broken:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;semver tries to take an existing semiotic system (= version numbers), which
has developed informally and is therefore a loose convention rather than an
exact spec, and reinterpret it in terms of an exact spec (or impose that spec on
it). trouble is, the prior informal meaning won't go away so easily (why should
it?), especially for projects that have been around longer than semver. the
problem then is, since the two systems (the informal one and semver) look the
same in terms of their symbolic representation, it's hard to guess which one
you're dealing with by just eyeballing the version number of a library (or
project in general).&lt;/p&gt;
&lt;p&gt;it's like if someone decided that "f*ck" should mean "orchid" from now on,
because it's nicer -- on hearing the word, you'd never know if it's being
used as the original profanity, or in its new meaning. homonymy is a pain to
deal with when it's accidental (cf. NLP), so why introduce it on purpose?
the job that semver set out to do should be fulfilled by a new formal means
which is instantly recognizable, not by hijacking an existing one and
overlaying additional interpretation on it and thus making it &lt;strong&gt;ambiguous&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;even if version numbers hadn't existed before semver, they're terribly
&lt;strong&gt;inadequate&lt;/strong&gt; for the purpose of conveying information about the severity of
changes introduced by an update (though I understand their appeal to
mathematically-minded people). they're inadequate because they're &lt;strong&gt;implicit&lt;/strong&gt;
-- it's a bit like if someone decided they don't need hash maps because they can
make do with arrays by remembering the order in which they're adding in the
key-val pairs. if I remember the order, then I know which key the given index
implicitly refers to, and the result is as good as a hash map, isn't it?&lt;/p&gt;
&lt;p&gt;except it isn't. keys are useful because they have &lt;strong&gt;explicit semantics&lt;/strong&gt;,
making it instantly clear what kind of value you're retrieving. in the same
way, encoding the information about the severity of changes into version
numbers makes it implicit (in addition to being ambiguous, as stated
previously). why not use explicit keyword tags along with the version number
(which can be romantic, semantic -- whichever floats the dev team's boat and
best reflects the progress of the project) to give a heads up as to the
nature of the update? e.g. :patch, :potentially-breaking, :major-api-change
etc.&lt;/p&gt;
&lt;p&gt;granted, even language is a code which needs to be learned, like semver
(gross oversimplification here, but let's not get into the details of
language acquisition), but since it's widely established and
conventionalized for conveying the kinds of meanings semver is trying to
convey, &lt;strong&gt;why not just use it when it's available&lt;/strong&gt;? why use a system
(version numbers) which is less well-suited to the purpose &lt;strong&gt;and&lt;/strong&gt; ambiguous
to boot?&lt;/p&gt;
&lt;p&gt;(on the other hand, numbers are eminently well-suited for keeping track of
which version is newer than which and how much so -- the original purpose of
version numbering -- because they are designed to have orderings defined on
them. by contrast, words would do a terrible job at this. if you care to
indicate the evolution of your codebase, you might introduce your own
disciplined &lt;a href="http://sentimentalversioning.org/"&gt;romantic or sentimental&lt;/a&gt;
versioning scheme, which ironically is a more meaningful and ergo semantic
way of doing versioning than semver, because it sticks to the conventional
semantics of numbers (the closer the numbers, the more similar the
versions). if you don't care about this, which is perfectly fine, you might
as well use dates for version numbers.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;keyword tags have the advantage that they're instantly human-readable by anyone
who has a basic command of English. if there is sufficient will in the
community, a useful subset can be frozen in a binding spec, so that they are
machine-readable as well.&lt;/p&gt;
&lt;p&gt;I'm not sure whether these keywords should be an appendix to the version number
(like v2.3.4-:potentially-breaking), or whether the information they provide
should be more extensive and included in a formalized preamble to the changelog
(finally forcing people to at least take a glance at it ;) ). using the latter
approach, the information provided could be (optionally) even more targeted,
e.g. detailing explicitly which parts of the API are affected in a non-backwards
compatible manner by the update.&lt;/p&gt;
&lt;p&gt;anyways, just a few ideas :) I am not primarily a coder, so there may be obvious
drawbacks to this scheme that I can't see or which have already been discussed
by the community on multiple occasions which have escaped my attention. in which
case, please bear with me and excuse my lack of sophistication.&lt;/p&gt;</content><category term="floss"></category><category term="semver"></category><category term="versioning"></category><category term="underscore.js"></category><category term="library"></category><category term="development"></category><category term="dependency"></category></entry></feed>